{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","Component/ContactForm/ContactForm.module.css","Component/Filter/Filter.module.css","Component/ElementContactList/ElementContactList.module.css","Component/ContactList/ContactList.module.css","../node_modules/uuid/dist/esm-browser/rng.js","redux/phonebook/phonebook-operations.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","Component/ContactForm/ContactForm.js","redux/phonebook/phonebook-selectors.js","Component/Filter/Filter.js","Component/ElementContactList/ElementContactList.js","Component/ContactList/ContactList.js","views/ContactsView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","module","exports","getRandomValues","fetchContacts","dispatch","a","fetchContactRequest","axios","get","data","fetchContactSuccess","fetchContactError","message","rnds8","Uint8Array","rng","crypto","bind","msCrypto","Error","validate","uuid","REGEX","test","byteToHex","toString","substr","stringify","offset","arguments","toLowerCase","v4","options","buf","rnds","random","ContactForm","useDispatch","nameInputId","uuidv4","numberInputId","useState","name","number","state","setState","handleChange","useCallback","e","currentTarget","prev","handleSubmit","preventDefault","alert","contact","addContactRequest","post","then","addContactSuccess","catch","error","addContactError","addContact","reset","onSubmit","className","styles","contacts_form","htmlFor","label","type","pattern","title","required","onChange","id","input","form_button","getLoading","contacts","loading","getFilter","filter","getVisibleContacts","createSelector","items","normalizedFilter","includes","Filter","useSelector","changeFilter","target","ElementContactList","contact_name","contact_number","ContactList","useEffect","isLoadingContacts","contact_list","map","contact_item","onClick","deleteContactRequest","delete","deleteContactSuccess","deleteContactError","deleteContact","item_button","ContactsView","Container"],"mappings":"8LAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,oBIJtGC,EAAOC,QAAU,CAAC,cAAgB,mCAAmC,YAAc,iCAAiC,MAAQ,2BAA2B,MAAQ,6B,oBCA/JD,EAAOC,QAAU,CAAC,YAAc,4BAA4B,KAAO,qBAAqB,OAAS,uBAAuB,KAAO,qBAAqB,gBAAkB,gCAAgC,iBAAmB,iCAAiC,MAAQ,sBAAsB,MAAQ,wB,oBCAhSD,EAAOC,QAAU,CAAC,aAAe,yCAAyC,eAAiB,6C,oBCA3FD,EAAOC,QAAU,CAAC,aAAe,kCAAkC,aAAe,kCAAkC,YAAc,mC,oFCE9HC,E,iGCYSC,EAAgB,yDAAM,WAAMC,GAAN,iBAAAC,EAAA,6DACjCD,EAASE,eADwB,kBAGRC,IAAMC,IAAI,aAHF,gBAGvBC,EAHuB,EAGvBA,KACRL,EAASM,YAAoBD,IAJE,gDAM/BL,EAASO,YAAkB,KAAMC,UANF,yDAAN,uDDXzBC,EAAQ,IAAIC,WAAW,IACZ,SAASC,IAEtB,IAAKb,KAGHA,EAAoC,qBAAXc,QAA0BA,OAAOd,iBAAmBc,OAAOd,gBAAgBe,KAAKD,SAA+B,qBAAbE,UAAgE,oBAA7BA,SAAShB,iBAAkCgB,SAAShB,gBAAgBe,KAAKC,WAGrO,MAAM,IAAIC,MAAM,4GAIpB,OAAOjB,EAAgBW,GEjBV,4HCQf,ICFeO,MAJf,SAAkBC,GAChB,MAAuB,kBAATA,GAAqBC,EAAMC,KAAKF,IDG5CG,EAAY,GAEP7C,EAAI,EAAGA,EAAI,MAAOA,EACzB6C,EAAU9B,MAAMf,EAAI,KAAO8C,SAAS,IAAIC,OAAO,IAoBlCC,MAjBf,SAAmBjD,GACjB,IAAIkD,EAASC,UAAUjC,OAAS,QAAsBP,IAAjBwC,UAAU,GAAmBA,UAAU,GAAK,EAG7ER,GAAQG,EAAU9C,EAAIkD,EAAS,IAAMJ,EAAU9C,EAAIkD,EAAS,IAAMJ,EAAU9C,EAAIkD,EAAS,IAAMJ,EAAU9C,EAAIkD,EAAS,IAAM,IAAMJ,EAAU9C,EAAIkD,EAAS,IAAMJ,EAAU9C,EAAIkD,EAAS,IAAM,IAAMJ,EAAU9C,EAAIkD,EAAS,IAAMJ,EAAU9C,EAAIkD,EAAS,IAAM,IAAMJ,EAAU9C,EAAIkD,EAAS,IAAMJ,EAAU9C,EAAIkD,EAAS,IAAM,IAAMJ,EAAU9C,EAAIkD,EAAS,KAAOJ,EAAU9C,EAAIkD,EAAS,KAAOJ,EAAU9C,EAAIkD,EAAS,KAAOJ,EAAU9C,EAAIkD,EAAS,KAAOJ,EAAU9C,EAAIkD,EAAS,KAAOJ,EAAU9C,EAAIkD,EAAS,MAAME,cAMzf,IAAKV,EAASC,GACZ,MAAMtB,UAAU,+BAGlB,OAAOsB,GEHMU,MApBf,SAAYC,EAASC,EAAKL,GAExB,IAAIM,GADJF,EAAUA,GAAW,IACFG,SAAWH,EAAQjB,KAAOA,KAK7C,GAHAmB,EAAK,GAAe,GAAVA,EAAK,GAAY,GAC3BA,EAAK,GAAe,GAAVA,EAAK,GAAY,IAEvBD,EAAK,CACPL,EAASA,GAAU,EAEnB,IAAK,IAAIjD,EAAI,EAAGA,EAAI,KAAMA,EACxBsD,EAAIL,EAASjD,GAAKuD,EAAKvD,GAGzB,OAAOsD,EAGT,OAAON,EAAUO,I,yBCdJ,SAASE,IACtB,IAAMhC,EAAWiC,cAEXC,EAAcC,IACdC,EAAgBD,IAMtB,EAA0BE,mBAJL,CACnBC,KAAM,GACNC,OAAQ,KAEV,mBAAOC,EAAP,KAAcC,EAAd,KAGMC,EAAeC,uBAAY,SAAAC,GAC/B,MAAwBA,EAAEC,cAAlBP,EAAR,EAAQA,KAAM/C,EAAd,EAAcA,MACdkD,GAAS,SAAAK,GAAI,kCACRA,GADQ,kBAEVR,EAAO/C,SAET,IAIGwD,EAAeJ,uBACnB,SAAAC,GACEA,EAAEI,iBACF,IAAQV,EAAiBE,EAAjBF,KAAMC,EAAWC,EAAXD,OACd,GAAa,KAATD,GAA0B,KAAXC,EACjB,OAAOU,MAAM,4BAEfjD,ELFoB,SAACsC,EAAMC,GAAP,OAAkB,SAAAvC,GAC1C,IAAMkD,EAAU,CACdZ,OACAC,UAEFvC,EAASmD,eACThD,IACGiD,KAAK,YAAaF,GAClBG,MAAK,gBAAGhD,EAAH,EAAGA,KAAH,OAAcL,EAASsD,YAAkBjD,OAC9CkD,OAAM,SAAAC,GAAK,OAAIxD,EAASyD,YAAgBD,EAAMhD,cKPpCkD,CAAWpB,EAAMC,IAC1BoB,MAGF,CAAC3D,EAAUwC,IAGPmB,EAAQ,WACZlB,EAAS,CAAEH,KAAM,GAAIC,OAAQ,MAGvBD,EAAiBE,EAAjBF,KAAMC,EAAWC,EAAXD,OAEd,OACE,mCACE,uBAAMqB,SAAUb,EAAcc,UAAWC,IAAOC,cAAhD,UACE,8BACE,wBAAOC,QAAS9B,EAAa2B,UAAWC,IAAOG,MAA/C,iBAEE,uBACEC,KAAK,OACL3E,MAAO+C,EACPA,KAAK,OACL6B,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,SAAU5B,EACV6B,GAAIrC,EACJ2B,UAAWC,IAAOU,aAIxB,8BACE,wBAAOR,QAAS5B,EAAeyB,UAAWC,IAAOG,MAAjD,mBAEE,uBACEC,KAAK,MACL3E,MAAOgD,EACPD,KAAK,SACL6B,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,SAAU5B,EACV6B,GAAInC,EACJyB,UAAWC,IAAOU,aAKxB,wBAAQN,KAAK,SAASL,UAAWC,IAAOW,YAAxC,8B,8BCnFKC,EAAa,SAAAlC,GAAK,OAAIA,EAAMmC,SAASC,SAErCC,EAAY,SAAArC,GAAK,OAAIA,EAAMmC,SAASG,QAcpCC,EAAqBC,YAChC,CAb4B,SAAAxC,GAAK,OAAIA,EAAMmC,SAASM,OAanCJ,IACjB,SAACF,EAAUG,GACT,IAAMI,EAAmBJ,EAAOpD,cAEhC,OAAOiD,EAASG,QAAO,SAAA5B,GAAO,OAC5BA,EAAQZ,KAAKZ,cAAcyD,SAASD,SClB3B,SAASE,IACtB,IAAMpF,EAAWiC,cACX1C,EAAQ8F,YAAYR,GAGpBP,EAAW3B,uBACf,SAAAC,GACE5C,EAASsF,YAAa1C,EAAE2C,OAAOhG,UAEjC,CAACS,IAGH,OACE,wBAAO6D,UAAWC,IAAOG,MAAzB,iCAEE,uBACEC,KAAK,OACL3E,MAAOA,EACP+E,SAAUA,EACVT,UAAWC,IAAOU,W,sBCPXgB,EAdY,SAAC,GAAsB,IAApBlD,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAClC,OACE,qCACE,uBAAMsB,UAAWC,IAAO2B,aAAxB,UAAuCnD,EAAvC,QACA,sBAAMuB,UAAWC,IAAO4B,eAAxB,SAAyCnD,Q,kBCGhC,SAASoD,IACtB,IAAM3F,EAAWiC,cAIjB2D,qBAAU,WACR5F,EAASD,OACR,CAACC,IAEJ,IAAM2E,EAAWU,YAAYN,GACvBc,EAAoBR,YAAYX,GAUtC,OACE,qCACGmB,GAAqB,4FAEtB,oBAAIhC,UAAWC,IAAOgC,aAAtB,SACGnB,EAASoB,KAAI,gBAAGxB,EAAH,EAAGA,GAAIjC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,qBAAasB,UAAWC,IAAOkC,aAA/B,UACE,cAAC,EAAD,CAAoB1D,KAAMA,EAAMC,OAAQA,IACxC,wBACE2B,KAAK,SACL+B,QAAS,kBAAMjG,ETKA,SAAAuE,GAAE,OAAI,SAAAvE,GACjCA,EAASkG,eAET/F,IACGgG,OADH,oBACuB5B,IACpBlB,MAAK,kBAAMrD,EAASoG,YAAqB7B,OACzChB,OAAM,SAAAC,GAAK,OAAIxD,EAASqG,YAAmB7C,EAAMhD,cSXhB8F,CAAc/B,KACtCV,UAAWC,IAAOyC,YAHpB,sBAFOhC,WC7BJ,SAASiC,IACtB,IAAMxG,EAAWiC,cAMjB,OAJA2D,qBAAU,WACR5F,EAASD,OACR,CAACC,IAGF,cAACyG,EAAA,EAAD,UACE,gCACE,2CACA,cAACzE,EAAD,IAEA,0CACA,cAACoD,EAAD,IAEA,cAACO,EAAD","file":"static/js/contacts-view.918c540d.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts_form\":\"ContactForm_contacts_form__2RU9c\",\"form_button\":\"ContactForm_form_button__FMexw\",\"label\":\"ContactForm_label__1jBgU\",\"input\":\"ContactForm_input__3FhsO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend_list\":\"Filter_friend_list__1DPvp\",\"item\":\"Filter_item__3Yb9P\",\"avatar\":\"Filter_avatar__3DCNn\",\"name\":\"Filter_name__1mMhF\",\"status_isOnline\":\"Filter_status_isOnline__8tCYj\",\"status_isOffline\":\"Filter_status_isOffline__2gfsi\",\"label\":\"Filter_label__278ou\",\"input\":\"Filter_input__p2vq2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_name\":\"ElementContactList_contact_name__iyc-o\",\"contact_number\":\"ElementContactList_contact_number__2A8rd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactList_contact_list__pK6CR\",\"contact_item\":\"ContactList_contact_item__99kT-\",\"item_button\":\"ContactList_item_button__2JjbW\"};","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from './phonebook-action';\r\n\r\n// axios.defaults.baseURL = 'http://localhost:4040';\r\n// ---------------------------async-await-------------------------\r\nexport const fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactRequest());\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error.message));\r\n  }\r\n};\r\n// -----------------then-cath----------------------------------\r\n// export const fetchContacts = () => dispatch => {\r\n//   dispatch(fetchContactRequest());\r\n\r\n//   axios\r\n//     .get('/contacts')\r\n//     .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n//     .catch(error => dispatch(fetchContactError(error)));\r\n// };\r\n\r\nexport const addContact = (name, number) => dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error.message)));\r\n};\r\n\r\nexport const deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => dispatch(deleteContactSuccess(id)))\r\n    .catch(error => dispatch(deleteContactError(error.message)));\r\n};\r\n","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","import React, { useState, useCallback } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addContact } from '../../redux/phonebook/phonebook-operations';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styles from './ContactForm.module.css';\r\n\r\nexport default function ContactForm() {\r\n  const dispatch = useDispatch();\r\n\r\n  const nameInputId = uuidv4();\r\n  const numberInputId = uuidv4();\r\n\r\n  const initialState = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n  const [state, setState] = useState(initialState);\r\n\r\n  /** Отвечает за обновление состояния*/\r\n  const handleChange = useCallback(e => {\r\n    const { name, value } = e.currentTarget;\r\n    setState(prev => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  }, []);\r\n  /** Вызывается при отправке формы */\r\n  // Проп который передается форме для вызова при сабмите\r\n\r\n  const handleSubmit = useCallback(\r\n    e => {\r\n      e.preventDefault();\r\n      const { name, number } = state;\r\n      if (name === '' && number === '') {\r\n        return alert('Please fill empty fields');\r\n      }\r\n      dispatch(addContact(name, number));\r\n      reset();\r\n      return;\r\n    },\r\n    [dispatch, state],\r\n  );\r\n\r\n  const reset = () => {\r\n    setState({ name: '', number: '' });\r\n  };\r\n\r\n  const { name, number } = state;\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit} className={styles.contacts_form}>\r\n        <div>\r\n          <label htmlFor={nameInputId} className={styles.label}>\r\n            Name\r\n            <input\r\n              type=\"text\"\r\n              value={name}\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              onChange={handleChange}\r\n              id={nameInputId}\r\n              className={styles.input}\r\n            />\r\n          </label>\r\n        </div>\r\n        <div>\r\n          <label htmlFor={numberInputId} className={styles.label}>\r\n            Number\r\n            <input\r\n              type=\"tel\"\r\n              value={number}\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              onChange={handleChange}\r\n              id={numberInputId}\r\n              className={styles.input}\r\n            />\r\n          </label>\r\n        </div>\r\n\r\n        <button type=\"submit\" className={styles.form_button}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n}\r\n\r\n// class ContactForm extends Component {\r\n//   state = {\r\n//     name: '',\r\n//     number: '',\r\n//   };\r\n\r\n//   nameInputId = uuidv4();\r\n//   numberInputId = uuidv4();\r\n\r\n//   /** Отвечает за обновление состояния*/\r\n//   handleChange = e => {\r\n//     const { name, value } = e.currentTarget;\r\n//     this.setState({ [name]: value });\r\n//   };\r\n//   /** Вызывается при отправке формы */\r\n//   // Проп который передается форме для вызова при сабмите\r\n\r\n//   handleSubmit = e => {\r\n//     e.preventDefault();\r\n//     const { name, number } = this.state;\r\n//     if (name !== '' && number !== '') {\r\n//       this.props.onSubmit(name, number);\r\n//       this.reset();\r\n//       return;\r\n//     }\r\n//     alert('Please fill empty fields');\r\n//   };\r\n\r\n//   reset = () => {\r\n//     this.setState({ name: '', number: '' });\r\n//   };\r\n\r\n//   render() {\r\n//     const { name, number } = this.state;\r\n\r\n//     return (\r\n//       <>\r\n//         <form onSubmit={this.handleSubmit} className={styles.contacts_form}>\r\n//           <div>\r\n//             <label htmlFor={this.nameInputId} className={styles.label}>\r\n//               Name\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={name}\r\n//                 name=\"name\"\r\n//                 pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//                 title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//                 required\r\n//                 onChange={this.handleChange}\r\n//                 id={this.nameInputId}\r\n//                 className={styles.input}\r\n//               />\r\n//             </label>\r\n//           </div>\r\n//           <div>\r\n//             <label htmlFor={this.numberInputId} className={styles.label}>\r\n//               Number\r\n//               <input\r\n//                 type=\"tel\"\r\n//                 value={number}\r\n//                 name=\"number\"\r\n//                 pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//                 title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//                 required\r\n//                 onChange={this.handleChange}\r\n//                 id={this.numberInputId}\r\n//                 className={styles.input}\r\n//               />\r\n//             </label>\r\n//           </div>\r\n\r\n//           <button type=\"submit\" className={styles.form_button}>\r\n//             Add contact\r\n//           </button>\r\n//         </form>\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onSubmit: (name, number) => dispatch(addContact(name, number)),\r\n// });\r\n// export default connect(null, mapDispatchToProps)(ContactForm);\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const getLoading = state => state.contacts.loading;\r\n\r\nexport const getFilter = state => state.contacts.filter;\r\n\r\nexport const getAllContacts = state => state.contacts.items;\r\n\r\n// export const getVisibleContacts = state => {\r\n//   const contacts = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n//   const normalizedFilter = filter.toLowerCase();\r\n\r\n//   return contacts.filter(contact =>\r\n//     contact.name.toLowerCase().includes(normalizedFilter),\r\n//   );\r\n// };\r\n//--------используем мемоизацию:\r\nexport const getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n","import React, { useCallback } from 'react';\r\nimport styles from './Filter.module.css';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { changeFilter } from '../../redux/phonebook/phonebook-action';\r\nimport { getFilter } from '../../redux/phonebook/phonebook-selectors';\r\n\r\nexport default function Filter() {\r\n  const dispatch = useDispatch();\r\n  const value = useSelector(getFilter);\r\n  // что бы onChange не ререндилась каждый раз, можно делать через useCallback\r\n  // const onChange = e => dispatch(changeFilter(e.target.value));\r\n  const onChange = useCallback(\r\n    e => {\r\n      dispatch(changeFilter(e.target.value));\r\n    },\r\n    [dispatch],\r\n  );\r\n\r\n  return (\r\n    <label className={styles.label}>\r\n      Find contact by name\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n        className={styles.input}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from '../ElementContactList/ElementContactList.module.css';\r\n\r\nconst ElementContactList = ({ name, number }) => {\r\n  return (\r\n    <>\r\n      <span className={styles.contact_name}>{name}: </span>\r\n      <span className={styles.contact_number}>{number}</span>\r\n    </>\r\n  );\r\n};\r\n\r\nElementContactList.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n};\r\n\r\nexport default ElementContactList;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { deleteContact } from '../../redux/phonebook/phonebook-operations';\r\nimport ElementContactList from '../ElementContactList/ElementContactList';\r\nimport styles from './ContactList.module.css';\r\nimport { fetchContacts } from '../../redux/phonebook/phonebook-operations';\r\nimport {\r\n  getLoading,\r\n  getVisibleContacts,\r\n} from '../../redux/phonebook/phonebook-selectors';\r\n\r\nexport default function ContactList() {\r\n  const dispatch = useDispatch();\r\n  //   componentDidMount() {\r\n  //     this.props.onfetchContacts();\r\n  //   }\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const isLoadingContacts = useSelector(getLoading);\r\n  // const mapStateToProps = state => ({\r\n  //   contacts: getVisibleContacts(state),\r\n  //   isLoadingContacts: getLoading(state),\r\n  // });\r\n\r\n  // const mapDispatchToProps = dispatch => ({\r\n  //   onClick: id => dispatch(deleteContact(id)),\r\n  //   onfetchContacts: () => dispatch(fetchContacts()),  // });\r\n\r\n  return (\r\n    <>\r\n      {isLoadingContacts && <h1>....Загружаем</h1>}\r\n\r\n      <ul className={styles.contact_list}>\r\n        {contacts.map(({ id, name, number }) => (\r\n          <li key={id} className={styles.contact_item}>\r\n            <ElementContactList name={name} number={number} />\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => dispatch(deleteContact(id))}\r\n              className={styles.item_button}\r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n\r\n// class ContactList extends Component {\r\n//   componentDidMount() {\r\n//     this.props.onfetchContacts();\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <>\r\n//         {this.props.isLoadingContacts && <h1>....Загружаем</h1>}\r\n\r\n//         <ul className={styles.contact_list}>\r\n//           {this.props.contacts.map(({ id, name, number }) => (\r\n//             <li key={id} className={styles.contact_item}>\r\n//               <ElementContactList name={name} number={number} />\r\n//               <button\r\n//                 type=\"button\"\r\n//                 onClick={() => {\r\n//                   this.props.onClick(id);\r\n//                 }}\r\n//                 className={styles.item_button}\r\n//               >\r\n//                 Delete\r\n//               </button>\r\n//             </li>\r\n//           ))}\r\n//         </ul>\r\n//       </>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const mapStateToProps = state => ({\r\n//   contacts: getVisibleContacts(state),\r\n//   isLoadingContacts: getLoading(state),\r\n// });\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onClick: id => dispatch(deleteContact(id)),\r\n//   onfetchContacts: () => dispatch(fetchContacts()),\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport Container from '../Component/Container';\r\nimport ContactForm from '../Component/ContactForm';\r\nimport Filter from '../Component/Filter';\r\nimport ContactList from '../Component/ContactList';\r\nimport { fetchContacts } from '../redux/phonebook/phonebook-operations';\r\n\r\nexport default function ContactsView() {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <Container>\r\n      <div>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm />\r\n\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n\r\n        <ContactList />\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\n//   class ContactsView extends React.Component {\r\n//   // componentDidMount() {\r\n//   //   this.props.onFetchContacts();\r\n//   // }\r\n//   render() {\r\n//     return (\r\n//       <Container>\r\n//         <div>\r\n//           <h1>Phonebook</h1>\r\n//           <ContactForm />\r\n\r\n//           <h2>Contacts</h2>\r\n//           <Filter />\r\n\r\n//           <ContactList />\r\n//         </div>\r\n//       </Container>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// const mapDispatchToProps = dispatch => ({\r\n//   onFetchContacts: () => dispatch(fetchContacts()),\r\n// });\r\n//export default ContactsView;\r\n"],"sourceRoot":""}